= javascript_include_tag '/elm/control_module/elm'
= javascript_include_tag 'https://www.gstatic.com/charts/loader.js'

#carpi-control-container

.stream-container
  canvas#video-canvas.stream-container
  /#progress-intermediate.mdl-progress.mdl-js-progress.mdl-progress__indeterminate

  #charts-container
    #chart-torque
    #chart-direction

  /#info-container
  /  #received-data 0 Mb
  /  #fps-container

javascript:
  var container = document.getElementById('carpi-control-container');
  var elmApp = Elm.embed(Elm.CarPi, container);
  var controlModel = {};

  var socket = io('#{Rails.application.config.node_app_url}/control');

  //var frameTimestampPrev = Date.now();
  //var lastTimeFPSUpdated = Date.now();
  //var currentFPS = 0;

  var streamContainer = $('#stream-container');
  var receivedDataElement = $('#received-data');

  var torqueChart = null;
  var directionChart = null;
  var torqueOptions = null;
  var directionOptions = null;
  var torqueData = null;
  var directionData = null;

  var ratio_horizontal = 16;
  var ratio_vertical = 9;

  //setTimeout(function(){
  //  if($('#progress-intermediate').length > 0) {
  //    $('#progress-intermediate').removeClass('mdl-progress')
  //    $('#progress-intermediate').html('<h4>No video response :(</h4>')
  //
  //    setTimeout(function(){
  //      $('#progress-intermediate').remove()
  //    }, 2000)
  //  }
  //}, 5000)

  $('#progress-intermediate').remove()

  $(window).resize(resizeHandler)
  resizeHandler()

  //socket.on('before-stream', function(){
  //  $('#progress-intermediate').remove()
  //  streamContainer.css('background-size', 'cover')
  //})

  socket.on('stream', function (data) {
    var client = new WebSocket('ws://#{Rails.application.config.server_host}:' + data.port + '/');

    var canvas = document.getElementById('video-canvas');
    var player = new jsmpeg(client, {canvas: canvas});
  })

  socket.emit('capture', '#{params['id']}');

  google.charts.load('current', {'packages': ['gauge']});
  google.charts.setOnLoadCallback(drawChart);

  function drawChart() {
    torqueChart = new google.visualization.Gauge(document.getElementById('chart-torque'));
    directionChart = new google.visualization.Gauge(document.getElementById('chart-direction'));

    torqueOptions = {
      width: 150,
      redFrom: 90, redTo: 100,
      yellowFrom: 75, yellowTo: 90,
      minorTicks: 5,
      majorTicks: ['0', 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
      animation: {
        duration: 0
      }
    };

    directionOptions = {
      width: 150,
      animation: {
        duration: 0
      },
      min: -1,
      max: 1
    };

    torqueData = google.visualization.arrayToDataTable([
      ['Label', 'Value'],
      ['Torque', 0],
    ]);

    directionData = google.visualization.arrayToDataTable([
      ['Label', 'Value'],
      ['Direction', 0]
    ]);

    elmApp.ports.externalModel.subscribe(function (model) {
      compressedModel = getCompressedData(model)

      if (!(JSON.stringify(controlModel) === JSON.stringify(compressedModel))) {
        controlModel = compressedModel;
        socket.emit('car-control', controlModel);

        directionLevel = (parseFloat(controlModel[1])/100).toFixed(1)
        if(model.direction < 0)
          directionLevel *= -1

        torqueData.setValue(0, 1, controlModel[0]);
        directionData.setValue(0, 1, directionLevel);

        torqueChart.draw(torqueData, torqueOptions);
        directionChart.draw(directionData, directionOptions);
      }
    });

    resizeHandler(true)
  }

  function resizeHandler(event) {
    var newWidth = 0
    var newHeight = 0
    var currentWidth = $(window).width()
    var currentHeight = $(window).height() - $('header').height()

    if ((currentHeight / ratio_vertical) * ratio_horizontal < currentWidth) {
      newWidth = (currentHeight / ratio_vertical) * ratio_horizontal
      newHeight = currentHeight
    } else {
      newWidth = currentWidth
      newHeight = (currentWidth / ratio_horizontal) * ratio_vertical
    }

    $('.stream-container').css({
      height: newHeight + 'px',
      width: newWidth + 'px'
    })

    if(event) {
      gaugeDimensions = newHeight * 0.25
      if (gaugeDimensions > 150)
        gaugeDimensions = 150

      torqueOptions.width = gaugeDimensions
      torqueOptions.height = gaugeDimensions
      directionOptions.width = gaugeDimensions
      directionOptions.height = gaugeDimensions

      torqueChart.draw(torqueData, torqueOptions);
      directionChart.draw(directionData, directionOptions);
    }
  }

  // TODO move to helper
  function getCompressedData(model) {
    var values = []
    var stateByte = 0

    var torqueReversedMask = 0b00000100
    var directionRightMask = 0b00000001
    var directionLeftMask = 0b00000010

    if (model.torqueReversed) stateByte |= torqueReversedMask
    if (model.direction > 0) stateByte |= directionRightMask
    else if (model.direction < 0) stateByte |= directionLeftMask

    values.push(parseInt(model.torqueLevel))
    values.push(parseInt(model.directionLevel))
    values.push(stateByte)

    return values
  }